"(ns dci.commands.dci-platform-k8\n  (:require [commander]\n            [util]\n            [cljs.pprint :as pprint]\n            [clojure.string :as str]\n            [kitchen-async.promise :as p]\n            [kitchen-async.promise.from-channel]\n            [taoensso.timbre :as timbre\n             :refer-macros [log  trace  debug  info  warn  error  fatal  report\n                            logf tracef debugf infof warnf errorf fatalf reportf\n                            spy get-env]]\n            [cljs.core.async :refer [<! >! timeout take! chan] :refer-macros [go go-loop]]\n            [dci.drivers.interfaces :as api]\n            [dci.drivers.packet]\n            [dci.utils.core :as utils]\n            [dci.utils.command :as command]\n            [dci.components.kubeone :as kubeone]\n            [dci.state :refer [app-state]]))\n\n(def module-version \"0.0.5\")\n\n(defn command-handler []\n  (let [program (.. commander\n                    (version module-version)\n                    (description \"K8 Module\")\n                    (option \"-D --debug\" \"Debug\")\n                    (option \"-J --json\" \"Output to JSON\")\n                    (option \"-E --edn\" \"Output to EDN\")\n                    (option \"-P --provider <provider>\" \"Provider\"  #\"(?i)(packet|softlayer)$\" \"packet\"))]\n;;TODO CHeck for existing project and server liveness\n    ;;TODO Create project if doesn't exist?/ in service deploy?\n    ;;TODO Combine service/deploy with platform install?\n\n\n    (.. program\n        (command \"config <cluster-name> <cluster-network> <service-subnet>\")\n        (action (fn [service cluster-network service-subnet cmd]\n                  (p/let [config  (kubeone/create-kubeone-config \"packet\" service cluster-network service-subnet)]\n                    (println config)))))\n\n    (.. program\n        (command \"install <config>\")\n        (option \"-s --sshUsername [user]\")\n        (option \"-k --sshprivKeyFile [key]\")\n        (action (fn [config cmd]\n                  (p/let [_ (utils/set-env \"PACKET_AUTH_TOKEN\" (utils/get-env \"APIKEY\"))\n                          _ (utils/set-env \"PACKET_PROJECT_ID\" (utils/get-env \"PROJECT_ID\"))\n\n                          install? (utils/prompts-delete cmd (str \"Continue with the following config:\" config))]\n                    (when install?\n                      (info \"Installing k8 platform\")\n                      (p/let [result (command/run-command\n                                      #_(goog.string.format \"./dependencies/kubeone-linux install <(echo \\\"%s\\\") -b %s\" config service)\n                                      \"kubeone\" [\"install\" config])]\n                        (info \"completed k8 install, check logs for errors\")))))))\n    (.. program\n        (command \"reset <config>\")\n        (option \"-s --sshUsername [user]\")\n        (option \"-k --sshprivKeyFile [key]\")\n        (action (fn [config cmd]\n                  (p/let [_ (utils/set-env \"PACKET_AUTH_TOKEN\" (utils/get-env \"APIKEY\"))\n                          _ (utils/set-env \"PACKET_PROJECT_ID\" (utils/get-env \"PROJECT_ID\"))\n                          ;config  (kubeone/create-kubeone-config \"packet\" service cluster-network service-subnet )\n                          reset? (utils/prompts-delete cmd (str \"Reset the following config:\" config))]\n                    (when reset?\n                      (info \"Deleting k8 platform\")\n                      (p/let [result (command/run-command\n                                  ;;(goog.string.format \"./dependencies/kubeone-linux reset <(echo \\\"%s\\\")\" config service)\n                                      \"kubeone\" [\"reset\" config])]\n                        (info \"Completed k8 reset, check logs for errors\")))))))\n\n    (utils/handle-command-default program)\n\n    (.parse program (.-argv js/process))\n\n    (cond\n      (.-json program) (swap! app-state assoc :output :json)\n      (.-edn program)  (swap! app-state assoc :output :edn)\n      (.-dryrun program) (swap! app-state assoc :dryrun true)\n      (.-debug program) (do (swap! app-state assoc :debug true)\n                            (js/console.log program)\n                            (pprint/pprint @app-state))\n      (= (.-args.length program) 0) (.. program\n                                        (help #(clojure.string/replace % #\"dci-platform-k8\" \"platform-k8\")))\n      :else            (swap! app-state assoc :output :table))))\n\n(defn main! []\n  (utils/kubeone-exists?)\n  (command-handler))\n"